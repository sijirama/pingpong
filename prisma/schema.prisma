generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id
    name          String
    email         String
    emailVerified Boolean
    image         String?
    Session       Session[]
    Account       Account[]

    quotaLimit Int
    plan       Plan     @default(FREE)
    apiKey     String   @unique @default(cuid())
    discordId  String?
    slackId    String?
    telegramId String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    EventCategories EventCategory[]
    Event           Event[]
    Quota           Quota[]

    @@unique([email])
    @@index([email, apiKey])
    @@map("user")
}

model EventCategory {
    id    String  @id @default(cuid())
    name  String
    color Int
    emoji String?

    user   User   @relation(fields: [userId], references: [id])
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Event     Event[]

    @@unique([name, userId])
}

model Event {
    id               String         @id @default(cuid())
    fields           Json
    name             String
    formattedMessage String
    deliveryStatus   DeliveryStatus @default(PENDING)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id])
    userId String

    EventCategory   EventCategory? @relation(fields: [eventCategoryId], references: [id])
    eventCategoryId String?

    @@index([createdAt])
}

model Quota {
    id     String @id @default(cuid())
    user   User   @relation(fields: [userId], references: [id])
    userId String

    year Int
    month Int
    count Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum DeliveryStatus {
    PENDING
    DELIVERED
    FAILED
}

enum Plan {
    FREE
    PREMIUM
}

model Session {
    id        String   @id
    expiresAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("session")
}

model Account {
    id           String    @id
    accountId    String
    providerId   String
    userId       String
    user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken  String?
    refreshToken String?
    idToken      String?
    expiresAt    DateTime?
    password     String?

    @@map("account")
}

model Verification {
    id         String   @id
    identifier String
    value      String
    expiresAt  DateTime

    @@map("verification")
}
